@charset "UTF-8";
html {
	font-size: 62.5%;
}
body {
	font-size: 1.6em;
	margin: 0;
	padding: 0;
/*
	user-select: none;
*/
	background: #25151e;
	color: #fff;
	overflow-y: scroll;
}

/*
@index.html
<!DOCTYPE html>
<html lang="ja">
<head>
<title>Shop Titans Assistant</title>
<link rel="stylesheet" href="base.css">
<script src="togglebutton.js"></script>
<script src="grouplist.js"></script>
<script src="showfilter.js"></script>
<script src="indexeddb.js"></script>
<script src="dataset.js"></script>
<script src="item.js"></script>
<script src="localstring.js"></script>
<script src="script.js"></script>
</head>

<body>
<header>
<div class="flex">
	<toggle-button id="selectView" class="changeView changeView2">
		<radio-button value="viewItem" checked>アイテム一覧</radio-button>
		<radio-button value="viewCheckType">進化進捗管理</radio-button>
		<radio-button value="viewHero">ヒーロー装備管理</radio-button>
		<radio-button value="viewInformation">このツールについて</radio-button>
	</toggle-button>
</div>
<div class="targetView viewItem">
<div class="flex mt5">
	<toggle-button id="selectFormat" class="changeFormat">
		<radio-button value="formatStatus" checked>ステータス閲覧</radio-button>
		<radio-button value="formatSell">販売補助</radio-button>
		<radio-button value="formatGemSell">ジェム販売補助</radio-button>
		<radio-button value="formatBuy">仕入補助</radio-button>
		<radio-button value="formatEnchant">エンチャント補助</radio-button>
		<radio-button value="formatCheckItem">開発・寄付進捗管理</radio-button>
	</toggle-button>
</div>
</div>
</header>

<main class="reject">

<div class="targetView viewItem">
<div class="targetFormat formatStatus formatSell formatGemSell formatBuy formatEnchant">
<div class="flex gap10 mb5">
	<toggle-button id="switchQuality" class="changeList">
		<radio-button class="quality0" value="0" checked>普通</radio-button>
		<radio-button class="quality1" value="1">上級</radio-button>
		<radio-button class="quality2" value="2">上質</radio-button>
		<radio-button class="quality3" value="3">エピック</radio-button>
		<radio-button class="quality4" value="4">レジェンド</radio-button>
	</toggle-button>

	<div class="targetFormat formatStatus">
	<toggle-button id="selectStatus" class="changeList">
		<radio-button value="" checked>＊</radio-button>
		<radio-button value="ATK">ATK</radio-button>
		<radio-button value="DEF">DEF</radio-button>
		<radio-button value="HP">HP</radio-button>
		<radio-button value="EVA">EVA</radio-button>
		<radio-button value="CRIT">CRIT</radio-button>
	</toggle-button>
	</div>

	<div class="targetFormat formatSell formatGemSell formatBuy formatEnchant">
	<toggle-button id="switchEvent" class="changeList">
		<radio-button value="event0" checked>イベントなし</radio-button>
		<radio-button value="event1">お買い得 追加料金 +25%</radio-button>
		<radio-button value="event2">値切り 消費エネルギー -25%</radio-button>
	</toggle-button>
	</div>
</div>
</div>
</div>

<div class="targetView viewItem">
<div class="targetFormat formatSell formatGemSell formatBuy formatEnchant">
<div class="flex gap10 mb5">
	<label>
		<span class="info">最大エネルギー：</span>
		<input type="text" id="$MaxEnergy" class="changeList" data-para="MaxEnergy" size="5" title="最大エネルギーを入力してください">
	</label>
	<label>
		<span class="info">割引販売しきい値：</span>
		<input type="text" id="$DiscountThreshold" class="changeList" data-para="DiscountThreshold" size="5" title="割引販売するコスト上限を入力してください">
	</label>
	<label>
		<span class="info">追加料金販売しきい値：</span>
		<input type="text" id="$SurchageThreshold" class="changeList" data-para="SurchageThreshold" size="5" title="追加料金販売するコスト下限を入力してください">
	</label>
</div>
</div>
</div>

<div class="targetView viewItem">
<div class="targetFormat formatEnchant">
<div class="flex gap10 mb5">
	<label>
		<span class="info">エレメント付与：</span>
		<select id="$ElementValue" class="changeView">
			<option value="0">未選択</option>
			<option value="350000" selected>ティア９のエレメント</option>
			<option value="105000">7.火のエレメント(火)</option>
			<option value="100000">7.潮のエレメント(水)</option>
			<option value="99500">7.強風のエレメント(風)</option>
			<option value="96500">7.野生のエレメント(地)</option>
			<option value="96500">7.聖なるエレメント(光)</option>
			<option value="105000">7.不浄のエレメント(闇)</option>
			<option value="8150">4.燃えさしのエレメント(火)</option>
			<option value="7400">4.水疱のエレメント(水)</option>
			<option value="8550">4.そよ風のエレメント(風)</option>
			<option value="9800">4.自然のエレメント(地)</option>
			<option value="9600">4.光のエレメント(光)</option>
			<option value="10500">4.汚染のエレメント(闇)</option>
		</select>
	</label>
	<label>
		<span class="info">精霊付与：</span>
		<select id="$SpiritValue" class="changeView">
			<option value="0">未選択</option>
			<option value="350000" selected>ティア９の精霊</option>
			<option value="110000">7.サイの精霊</option>
			<option value="110000">7.フクロウの精霊</option>
			<option value="115000">7.アルマジロの精霊</option>
			<option value="125000">7.馬の精霊</option>
			<option value="130000">7.カバの精霊</option>
			<option value="130000">7.トカゲの精霊</option>
			<option value="9200">4.狼の精霊</option>
			<option value="9400">4.牡山羊の精霊</option>
			<option value="9750">4.ワシの精霊</option>
			<option value="10000">4.雄牛の精霊</option>
			<option value="11000">4.毒蛇の精霊</option>
			<option value="12000">4.猫の精霊</option>
		</select>
	</label>
</div>
</div>
</div>

<div class="targetView viewItem">
<div class="targetFormat formatCheckItem">
<div class="gap10 mb5">
	<toggle-button id="selectDonate" class="changeList">
		<radio-button checked>すべて表示</radio-button>
		<radio-button class="quality0" value="Donated0">普通<br>未寄付表示</radio-button>
		<radio-button class="quality1" value="Donated1">上級<br>未寄付表示</radio-button>
		<radio-button class="quality2" value="Donated2">上質<br>未寄付表示</radio-button>
		<radio-button class="quality3" value="Donated3">エピック<br>未寄付表示</radio-button>
		<radio-button class="quality4" value="Donated4">レジェンド<br>未寄付表示</radio-button>
	</toggle-button>
</div>
</div>
</div>

<div class="targetView viewItem">
	<div id="$viewItem" class="flex gap10"></div>
</div>

<div class="targetView viewCheckType">
	<div id="$viewCheckType" class="flex gap10"></div>
</div>

<div class="targetView viewHero">
	<div id="$viewHero" class="">仕様検討中...</div>
</div>

<div class="targetView viewInformation">
	<div id="$viewInformation" class="">
	はじめに<br>
	このツールはショップタイタンでアイテム販売を行う際のあれこれを補助する目的で作成しました<br>
	「このティア10の上級って半額売り？倍額売り？」「このアイテム融合予定だったかな？コレクション確認しなきゃ」といった悩みを解決します<br>
	<br>
	なお個人利用のため作ったものを気まぐれでアップしているだけなので勝手に拡散するのはおやめください<br>
	諸事情により急遽公開を中止する可能性があることもご了承ください<br>
	このツールの結果に従った結果、損失が出たとしても責任はとりません<br>
	鵜呑みにせず自分でも計算してみてくださいね（そしてバグがあれば教えてください）<br>
	<br>
	販売補助について<br>
	NPC販売の割引販売・追加料金販売のエネルギー換算率を判定しお得な販売方法を表示します<br>
	凡例）‐：通常販売推奨　半：割引販売推奨　倍：追加料金販売推奨　王：王様献上品<br>
	※赤字表示は未寄付アイテムです　品質が上のものが赤字の場合は融合すべきか検討してください<br>
	※最大エネルギーが追加販売に必要なエネルギーに足りていないものは"‐"表記となります<br>
	※マーク部分をクリックすると"？"表記となります<br>
	　マーケット売りしたほうが得になりそうなものにチェックしてください<br>
	　もう一度クリックすると解除されます<br>
	<br>
	仕入補助について<br>
	マーケットでアイテムを仕入れる際に損をしない仕入れ値を計算して表示します<br>
	わざわざ仕入れたものは追加料金販売をすると思いますのでエネルギー換算率の低いものは表示対象外です<br>
	追加料金販売金額から追加販売に必要なコストを引いているのでこれ以下で仕入れれば損はしないはず<br>
	<br>
	付与補助について<br>
	アイテムにエンチャントした際の価格変化を表示します<br>
	黒字はエンチャント後の金額がエンチャント価格と同じもの、赤字はそれより増額、赤字はそれより減額です<br>
	グレイ表記は倍売りできない、または換算率の悪いものです<br>
	<br>
	取り急ぎ実装しましたのでバグなどありましたら報告してください<br>
	<br>
	開発進捗・寄付管理について<br>
	各アイテムの開発進捗と寄付状況を管理します<br>
	チェックを付けると販売補助や仕入補助の計算値がそれを考慮したものとなります<br>
	お気に入りは未寄付品は販売補助で赤字表示されるところ<br>
	<br>
	進化進捗管理について<br>
	進化の軌跡を管理します<br>
	チェックを付けると販売補助や仕入補助の計算値がそれを考慮したものとなります<br>
	と言いたいところですけど実は種類ごとの価格アップ対応できてません<br>
	そこまで進化を進めた種類がないので検証できないんです<br>
	タイタンの全価格１％アップと同じように単純に販売価格に倍率含めて計算すればいいのかな？<br>
	タイタン２つ、種類別価格アップ１つなら追加料金販売金額は販売金額×(2＋0.02＋0.05）?<br>
	<br>
	今後の構想について<br>
	・販売補助にエンチャントしたときの価格変化対応機能<br>
	・"？"表記を別表で一覧表示して、マーケット売りの"マ"、ジェム売りの"Ｇ"などに表記を切り替える機能<br>
	・仕入補助に別の仕入ロジックへの表示切替機能（アイディア求む）<br>
	　単純に追加料金販売金額への表示切替機能もあったほうが良い？<br>
	・起動時に表示がガツンと切り替わるところや初回表示の重さをなんとかしたいところ<br>
	<br>
	更新履歴<br>
	2021/07/24 こっそり公開開始<br>
	2021/07/25 説明ページを新設、付与補助機能の実装、細かい修正をいくつか<br>
	</div>
</div>
</main>

<div class="filter-overlay reject">
<navi class="filter drag-and-drop reject">
	<div>ティア</div>
	<toggle-button id="filterTier" class="changeList">
		<reset-button checked>リセット</reset-button>
		<check-button value="1">１</check-button>
		<check-button value="2">２</check-button>
		<check-button value="3">３</check-button>
		<check-button value="4">４</check-button>
		<check-button value="5">５</check-button>
		<check-button value="6">６</check-button>
		<check-button value="7">７</check-button>
		<check-button value="8">８</check-button>
		<check-button value="9">９</check-button>
		<check-button value="10">10</check-button>
		<check-button value="11">11</check-button>
	</toggle-button>

	<div class="mt10">分類</div>
	<toggle-button id="filterCategory" class="changeList">
		<reset-button checked>リセット</reset-button>
		<radio-button value="Sword,Axe,Dagger,Mace,Spear,Bow,Wand,Staff,Gun,Crossbow" title="剣,斧,短刀,メイス,槍,弓,杖,ステッキ,銃,クロスボウ">武器</radio-button>
		<radio-button value="Heavy Armor,Light Armor,Clothes,Helmet,Rogue Hat,Magician Hat,Gauntlets,Gloves,Heavy Footwear,Light Footwear" title="ヘビーアーマー,ライトアーマー,衣服&#0010ヘルメット,ローグの帽子,魔術師の帽子&#0010ガントレット,ブレイザー&#0010フットウェア（重）,フットウェア（軽）">防具</radio-button>
		<radio-button value="Herbal Medicine,Potion,Spell,Shield,Ring,Amulet" title="植物薬,ポーション,呪文,盾,リング,アミュレット">アクセサリー</radio-button>
	</toggle-button>

	<div class="mt5">職業</div>
	<toggle-button id="filterJob" class="changeList">
		<reset-button class="gray" title="絞り込みなし" checked>*</reset-button>
		<radio-button class="red" value="Sword,Mace,Dagger,Heavy Armor,Gauntlets,Heavy Footwear,Potion,Shield" title="Sword,Mace,Dagger&#0010Heavy Armor&#0010Gauntlets&#0010Heavy Footwear&#0010Potion&#0010Shield">ソルジャー<br>(マーセナリー)</radio-button>
		<radio-button class="red" value="Sword,Mace,Dagger,Spear,Heavy Armor,Gauntlets,Heavy Footwear,Potion,Shield" title="Sword,Mace,Dagger,Spear&#0010Heavy Armor&#0010Gauntlets&#0010Heavy Footwear&#0010Potion&#0010Shield">(ソルジャー)<br>マーセナリー</radio-button>
		<radio-button class="red" value="Sword,Axe,Spear,Mace,Helmet,Gauntlets,Heavy Footwear,Potion,Herbal Medicine" title="Sword,Axe,Spear,Mace&#0010Helmet&#0010Gauntlets&#0010Heavy Footwear&#0010Potion&#0010Herbal Medicine">バーバリアン<br>(族長)</radio-button>
		<radio-button class="red" value="Sword,Axe,Spear,Mace,Helmet,Gauntlets,Heavy Footwear,Potion,Herbal Medicine,Shield" title="Sword,Axe,Spear,Mace&#0010Helmet&#0010Gauntlets&#0010Heavy Footwear&#0010Potion&#0010Herbal Medicine,Shield">(バーバリアン)<br>族長</radio-button>
		<radio-button class="red" value="" title="">ナイト<br>(ロード)</radio-button>
		<radio-button class="red" value="" title="">(ナイト)<br>ロード</radio-button>
		<radio-button class="red" value="" title="">レンジャー<br>ウォーデン</radio-button>
		<radio-button class="red" value="" title="">サムライ<br>ダイミョウ</radio-button>
		<radio-button class="red" value="" title="">狂戦士<br>(ヤール)</radio-button>
		<radio-button class="red" value="" title="">(狂戦士)<br>ヤール</radio-button>

		<radio-button class="green" value="" title="">シーフ<br>(トリックスター)</radio-button>
		<radio-button class="green" value="" title="">(シーフ)<br>トリックスター</radio-button>
		<radio-button class="green" value="" title="">モンク<br>グランドマスター</radio-button>
		<radio-button class="green" value="" title="">銃士<br>(コンキスタドール)</radio-button>
		<radio-button class="green" value="" title="">(銃士)<br>コンキスタドール</radio-button>
		<radio-button class="green" value="Axe,Dagger,Gun,Light Armor,Rogue Hat,Gloves,Herbal Medicine,Amulet" title="Axe,Dagger,Gun&#0010Light Armor&#0010Rogue Hat&#0010Gloves&#0010Herbal Medicine&#0010Amulet">ワンダラー<br>パスファインダー</radio-button>
		<radio-button class="green" value="Sword,Dagger,Bow,Light Armor,Rogue Hat,Gloves,Light Footwear,Ring" title="">忍者<br>センセイ</radio-button>
		<radio-button class="green" value="Dagger,Bow,Wand,Crossbow,Light Armor,Rogue Hat,Gloves,Light Footwear,Ring,Amulet" title="">踊り子<br>軽業師</radio-button>

		<radio-button class="blue" value="Wand,Staff,Crossbow,Clothes,Magician Hat,Light Footwear,Spell,Ring" title="Wand,Staff,Crossbow&#0010Clothes&#0010Magician Hat&#0010Light Footwear&#0010Spell&#0010Ring">メイジ<br>アークメイジ</radio-button>
		<radio-button class="blue" value="Mace,Spear,Wand,Clothes,Magician Hat,Light Footwear,Spell,Shield, title="Mace,Spear,Wand&#0010Clothes&#0010Magician Hat&#0010Light Footwear&#0010Spell&#0010Shield">クレリック<br>(ビショップ)</radio-button>
		<radio-button class="blue" value="Mace,Spear,Wand,Clothes,Magician Hat,Light Footwear,Spell,Shield,Ring" title="Mace,Spear,Wand&#0010Clothes&#0010Magician Hat&#0010Light Footwear&#0010Spell&#0010Shield,Ring">(クレリック)<br>ビショップ</radio-button>
		<radio-button class="blue" value="Bow,Wand,Staff,Clothes,Herbal Medicine,Amulet,Spell" title="Bow,Wand,Staff&#0010Clothes&#0010Herbal Medicine&#0010Herbal Medicine&#0010Amulet&#0010Spell">ドルイド<br>(アークドルイド)</radio-button>
		<radio-button class="blue" value="Bow,Wand,Staff,Clothes,Herbal Medicine,Amulet,Ring,Spell" title="Bow,Wand,Staff&#0010Clothes&#0010Herbal Medicine&#0010Herbal Medicine&#0010Amulet,Ring&#0010Spell">(ドルイド)<br>アークドルイド</radio-button>
		<radio-button class="blue" value="Dagger,Wand,Staff,Clothes,Gloves,Light Footwear,Spell" title="Dagger,Wand,Staff&#0010Clothes&#0010Gloves&#0010Light Footwear&#0010Spell&#0010Spell">ソーサラー<br>ウォーロック</radio-button>
		<radio-button class="blue" value="Sword,Axe,Bow,Staff,Heavy Armor,Light Armor,Clothes,Helmet,Magician Hat,Gauntlets,Gloves,Heavy Footwear,Light Footwear,Potion,Spell,Ring,Amulet,Herbal Medicine,Shield,Spell" title="Sword,Axe,Bow,Staff&#0010Heavy Armor,Light Armor,Clothes&#0010Helmet,Magician Hat,Gauntlets,Gloves&#0010Heavy Footwear,Light Footwear&#0010Potion,Spell,Ring,Amulet&#0010Herbal Medicine,Shield,Spell,Ring,Amulet">スペルブレイド<br>スペルナイト</radio-button>
		<radio-button class="blue" value="Mace,Wand,Staff,Clothes,Magician Hat,Gloves,Spell,Herbal Medicine,Shield" title="Mace,Wand,Staff&#0010Clothes&#0010Magician Hat&#0010Gloves&#0010Spell&#0010Herbal Medicine,Shield">風水師<br>アストラマンサー</radio-button>
	</toggle-button>

	<div class="mt5">収納</div>
	<toggle-button id="filterRack" class="changeList" format="icon">
		<reset-button checked><img src="./image/All.png"></reset-button>
		<radio-button value="Sword,Axe,Mace,Spear,Staff"><img src="./image/RackA.png"></radio-button>
		<radio-button value="Dagger,Bow,Wand,Gun,Crossbow,Shield"><img src="./image/RackB.png"></radio-button>
		<radio-button value="Helmet,Rogue Hat,Magician Hat"><img src="./image/RackC.png"><img src="./image/RackCH.png"></radio-button>
		<radio-button value="Heavy Armor,Light Armor,Clothes"><img src="./image/RackC.png"><img src="./image/RackCB.png"></radio-button>
		<radio-button value="Gauntlets,Gloves,Heavy Footwear,Light Footwear"><img src="./image/RackC.png"><img src="./image/RackCO.png"></radio-button>
		<radio-button value="Herbal Medicine,Potion,Spell,Ring,Amulet"><img src="./image/RackD.png"></radio-button>
	</toggle-button>

	<div class="message">枠外をクリックすると閉じます</div>

</div>
</navi>
</div>

<div class="targetView viewItem">
<div class="targetFormat formatStatus formatSell formatGemSell formatBuy formatEnchant">
<footer>
<div id="showFilterTier" is="show-filter" select="4,9,10">
	<span class="1">１</span>
	<span class="2">２</span>
	<span class="3">３</span>
	<span class="4">４</span>
	<span class="5">５</span>
	<span class="6">６</span>
	<span class="7">７</span>
	<span class="8">８</span>
	<span class="9">９</span>
	<span class="10">10</span>
	<span class="11">11</span>
</div>
<div id="showFilterType" is="show-filter" select="Axe,Light Footwear,Magician Hat">
	<img src="./image/Sword.png" class="Sword">
	<img src="./image/Axe.png" class="Axe">
	<img src="./image/Dagger.png" class="Dagger">
	<img src="./image/Mace.png" class="Mace">
	<img src="./image/Spear.png" class="Spear">
	<img src="./image/Bow.png" class="Bow">
	<img src="./image/Wand.png" class="Wand">
	<img src="./image/Staff.png" class="Staff">
	<img src="./image/Gun.png" class="Gun">
	<img src="./image/Crossbow.png" class="Crossbow">
	<img src="./image/Heavy Armor.png" class="Heavy-Armor">
	<img src="./image/Light Armor.png" class="Light-Armor">
	<img src="./image/Clothes.png" class="Clothes">
	<img src="./image/Helmet.png" class="Helmet">
	<img src="./image/Rogue Hat.png" class="Rogue-Hat">
	<img src="./image/Magician Hat.png" class="Magician-Hat">
	<img src="./image/Gauntlets.png" class="Gauntlets">
	<img src="./image/Gloves.png" class="Gloves">
	<img src="./image/Heavy Footwear.png" class="Heavy-Footwear">
	<img src="./image/Light Footwear.png" class="Light-Footwear">
	<img src="./image/Herbal Medicine.png" class="Herbal-Medicine">
	<img src="./image/Potion.png" class="Potion">
	<img src="./image/Spell.png" class="Spell">
	<img src="./image/Shield.png" class="Shield">
	<img src="./image/Ring.png" class="Ring">
	<img src="./image/Amulet.png" class="Amulet">
<!--
	<img src="./image/Enchantment.png" class="Enchantment">
	<img src="./image/Stone.png" class="Stone">
-->
</div>
</footer>
</div>
</div>

<div class="loading">Now Loading...</div>
<div id="toTop"class="to-top reject"></div>

<script>
const resizeObserver1 = new ResizeObserver(entries => {
	entries.forEach(entry => {
		document.querySelector('body').style.marginTop = `${entry.target.offsetHeight}px`;
	});
});
const resizeObserver2 = new ResizeObserver(entries => {
	entries.forEach(entry => {
		document.querySelector('.loading').style.bottom = `${entry.target.offsetHeight}px`;
		toTop.style.bottom = `${20 + entry.target.offsetHeight}px`;
		document.querySelector('body').style.marginBottom = `${entry.target.offsetHeight}px`;
	});
});
resizeObserver1.observe(document.querySelector('header'));
resizeObserver2.observe(document.querySelector('footer'));

document.querySelectorAll(`[type="text"]`).forEach(e => {
	e.addEventListener("focus", e => {
		const me = e.currentTarget;
		me.value = me.value.replaceAll(",", "");
		me.select();
	});
	e.addEventListener("blur", async e => {
		const me = e.currentTarget;
		me.value = (isNaN(me.value) ? 0 : Number(me.value.replaceAll(",", ""))).toLocaleString();
//		await Para.set(me.dataset.para, me.value);
	});
});

const fragment1 = new DocumentFragment();
const group1 = [
	"Sword", "Axe", "Dagger", "Mace", "Spear", "Bow", "Wand", "Staff", "Gun", "Crossbow",
	"Heavy Armor", "Light Armor", "Clothes", "Helmet", "Rogue Hat", "Magician Hat", "Gauntlets", "Gloves", "Heavy Footwear", "Light Footwear",
	"Herbal Medicine", "Potion", "Spell", "Shield", "Ring", "Amulet",
	"Runestone", "Moonstone", "Enchantment",
];
group1.forEach(group => {
	const grouplist = document.createElement("group-list");
	grouplist.classList.add("targetList");
	grouplist.setAttribute("format", "");
	grouplist.setAttribute("key", "Type");
	grouplist.setAttribute("group", group);
	fragment1.appendChild(grouplist);
});
$viewItem.appendChild(fragment1);

const event = new CustomEvent("changed", {
	bubbles: true,
	composed: true,
});

document.querySelectorAll(".changeView").forEach(e => {
	e.addEventListener("changed", e => {
		console.log("changeView", e.currentTarget.value);
		const view = e.currentTarget.value[0];
		document.querySelectorAll(".targetView").forEach(e => e.classList.toggle("reject", !e.classList.contains(view)));
	});
});
document.querySelectorAll(".changeView2").forEach(e => {
	e.addEventListener("changed", e => {
		console.log("changeView", e.currentTarget.value);
		const view = e.currentTarget.value[0];
		const format = selectFormat.value[0];
		if(view === "viewItem") document.querySelectorAll(".targetList").forEach(e => e.setAttribute("format", format));
		if(view === "viewCheckType") document.querySelectorAll(".targetList").forEach(e => e.setAttribute("format", "formatCheckType"));
	});
});
selectView.dispatchEvent(event);

document.querySelector("footer").addEventListener("click", () => {
	document.querySelector(".filter").classList.remove("reject");
	document.querySelector(".filter-overlay").classList.remove("reject");
});
document.querySelector(".filter-overlay").addEventListener("click", e => {
	document.querySelector(".filter").classList.add("reject");
	document.querySelector(".filter-overlay").classList.add("reject");
});
document.querySelector(".filter").addEventListener("click", e => e.stopPropagation());

document.querySelectorAll(".changeFormat").forEach(e => {
	e.addEventListener("changed", e => {
		console.log("changeFormat", e.currentTarget.value);
		const format = e.currentTarget.value[0];
		document.querySelectorAll(".targetFormat").forEach(e => e.classList.toggle("reject", !e.classList.contains(format)));
		document.querySelectorAll(".targetList").forEach(e => e.setAttribute("format", format));
	});
});
selectFormat.dispatchEvent(event);

window.addEventListener("scroll", e => {
	toTop.classList.toggle("reject", e.currentTarget.scrollY < 100);
});
toTop.addEventListener("click", () => {
	window.scroll({top: 0, behavior: 'smooth'});
});

//編集画面の移動制御
(function() {
  //要素の取得
  var elements = document.getElementsByClassName("drag-and-drop");
  
  //要素内のクリックされた位置を取得するグローバル（のような）変数
  var x, y
  
  //マウスが要素内で押されたとき、又はタッチされたとき発火
  for(var i = 0; i < elements.length; i++) {
    elements[i].addEventListener("mousedown", mdown, false);
    elements[i].addEventListener("touchstart", mdown, false);
  }

  //マウスが押された際の関数
  function mdown(e) {
    //クラス名に .drag を追加
    this.classList.add("drag");

    //タッチデイベントとマウスのイベントの差異を吸収
    if(e.type === "mousedown") {
      var event = e;
    } else {
      var event = e.changedTouches[0];
    }

    //要素内の相対座標を取得
    x = event.pageX - this.offsetLeft;
    y = event.pageY - this.offsetTop;

    //ムーブイベントにコールバック
    document.body.addEventListener("mousemove", mmove, false);
    document.body.addEventListener("touchmove", mmove, false);
  }

  //マウスカーソルが動いたときに発火
  function mmove(e) {
    //ドラッグしている要素を取得
    var drag = document.getElementsByClassName("drag")[0];

    //同様にマウスとタッチの差異を吸収
    if(e.type === "mousemove") {
      var event = e;
    } else {
      var event = e.changedTouches[0];
    }

    //フリックしたときに画面を動かさないようにデフォルト動作を抑制
    e.preventDefault();

    //マウスが動いた場所に要素を動かす
    drag.style.top = event.pageY - y + "px";
    drag.style.left = event.pageX - x + "px";

    //マウスボタンが離されたとき、またはカーソルが外れたとき発火
    drag.addEventListener("mouseup", mup, false);
    document.body.addEventListener("mouseleave", mup, false);
    drag.addEventListener("touchend", mup, false);
    document.body.addEventListener("touchleave", mup, false);
  }

  //マウスボタンが上がったら発火
  function mup(e) {
    var drag = document.getElementsByClassName("drag")[0];

    //ムーブベントハンドラの消去
    document.body.removeEventListener("mousemove", mmove, false);
    drag.removeEventListener("mouseup", mup, false);
    document.body.removeEventListener("touchmove", mmove, false);
    drag.removeEventListener("touchend", mup, false);

    //クラス名 .drag も消す
    drag.classList.remove("drag");
  }
filterCategory.onmousedown = e => e.stopPropagation();
filterRack.onmousedown = e => e.stopPropagation();
filterJob.onmousedown = e => e.stopPropagation();
filterTier.onmousedown = e => e.stopPropagation();
})();

</script>

</body>
</html>

@base.css
html {
	font-size: 62.5%;
}
body {
	font-size: 1.6em;
	margin: 0;
	padding: 0;
	user-select: none;
	background: #25151e;
	color: #fff;
	overflow-y: scroll;
}
header {
	font-size: 1.2rem;
	padding: 10px 20px;
	position: fixed;
	top: 0;
	width: 100%;
	z-index: 1;
	background: #522c44;
	box-sizing: border-box;
}
header .showHover {
	display: none;
}
header:hover .showHover {
	display: block;
}
navi {
	position: fixed;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	font-size: 1rem;
	padding: 20px 25px;
	position: fixed;
	z-index: 1;
	background: #000;
	box-sizing: border-box;
	width: 70%;
	border: 5px solid #ccc;
	border-radius: 15px;
	box-shadow: 5px 5px 10px #666;
}
main {
	font-size: 1.2rem;
	padding: 15px 20px;
	box-sizing: border-box;
}
footer {
	padding: 5px 20px;
	background: #522c44;
	font-size: 1.2rem;
	position: fixed;
	bottom: 0;
	width: 100%;
	box-sizing: border-box;
}

[type="text"] {
	text-align: right;
	height: 20px;
}
[type="text"]:focus {
	text-align: left;
}
select {
	height: 24px;
}
select, [type] {
	cursor: pointer;
}

.loading {
	position: fixed;
	right: 10px;
	transition: 1s;
}
.flex {
	display: flex;
	flex-wrap: wrap;
}
.gap10 {
	gap: 10px;
}
.mt10 {
	margin-top: 10px;
}
.mt5 {
	margin-top: 5px;
}
.mb5 {
	margin-bottom: 5px;
}
.mb10 {
	margin-bottom: 10px;
}
.mb15 {
	margin-bottom: 15px;
}

.filter-overlay {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 120%;
	z-index: 999;
}
.message {
	text-align: right;
}

.to-top {
	position: fixed;
	right: 30px;
	color: #ccc;
	border-radius: 50%;
	display: inline-block;
	text-decoration: none;
	opacity: .8;
}
.to-top::before {
	display: flex;
	justify-content: center;
	align-items: center;
	content: "▲";
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	width: 35px;
	height: 35px;
	background-color: #333;
	border-radius: 50%;
	z-index: -1;
	font-size: 2rem;
}
.to-top:hover {
	opacity: 1;
}
.reject {
	display: none;
}

@togglebutton.js
class ToggleButton extends HTMLElement {
	constructor() {
		super();
		this.root = this.attachShadow({mode: "open"});
		this.setObserver();
	}
	setObserver() {
		this.observer = new MutationObserver(mutations => {
			this.observer.disconnect();
			this.render();
		});
		this.observer.observe(this, {
			childList: true
		});
	}
	render() {
		this.type = this.getAttribute("type") ?? "select";
		this.target = [];
		this.reset = null;
		this.resetTarget = [];

		const fragment = new DocumentFragment();

		const style = document.createElement("style");
		style.innerHTML = togglebutton_css;
		fragment.appendChild(style);

		const name = this.getAttribute("id");
		const format = this.getAttribute("format") ?? "button";

		const container = document.createElement("div");
		fragment.appendChild(container);
		container.setAttribute("class", format);

		[...this.children].forEach(child => {
			const reset = child.nodeName.includes("RESET-");
			const type = child.nodeName.includes("CHECK-") ? "checkbox" : "radio";
			const css = child.getAttribute("class");
			const title = child.getAttribute("title");
			const value = child.getAttribute("value");
			const checked = child.hasAttribute("checked");
			const content = child.innerHTML;

			const label = document.createElement("label");
			container.appendChild(label);
			const input = document.createElement("input");
			label.appendChild(input);
			const span = document.createElement("span");
			label.appendChild(span);
			if(css) span.setAttribute("class", css);

			input.setAttribute("type", type);
			input.setAttribute("name", name);
			if(value) input.setAttribute("value", value);
			input.checked = checked;
			if(title) span.setAttribute("title", title);
			span.innerHTML = content;

			if(reset) {
				this.reset = input;
			} else {
				this.target.push(input);
				if(type === "checkbox") this.resetTarget.push(input);
			}
		});

		if(this.reset) {
			this.resetTarget.forEach(e => e.addEventListener("change", () => this.reset.checked = this.resetTarget.filter(target => target.checked).length ? false : true));
			this.reset.addEventListener("change", () => {
				this.resetTarget.forEach(target => target.checked = false);
				this.myEvent();
			});
		}
		this.target.forEach(e => e.addEventListener("change", this.myEvent));

		this.root.appendChild(fragment);
		this.setObserver();
	}
	myEvent() {
		const event = new CustomEvent("changed", {
			bubbles: true,
			composed: true,
		});
		this.dispatchEvent(event);
	}
	get value() {
		if(this.classList.contains("reject")) return this.target.flatMap(e => e.value.split(","));
		if(this.reset?.checked) return this.target.flatMap(e => e.value.split(","));
		return this.target.filter(e => this.type === "select" ? e.checked : !e.checked).flatMap(e => e.value.split(","));
	}
}
customElements.define("toggle-button", ToggleButton);

const togglebutton_css = `
input {
	display: none;
}
img {
	height: 30px;
	width: 30px;
	float:left;
	vertical-align: top;
pointer-events: none;

}

.button {
	display: inline-flex;
	flex-wrap: wrap;
	border-radius: 5px;
	overflow: hidden;
	gap: 1.5px;
	background: #000;
}
.button label {
	display: flex;
	flex-grow: 1;
	cursor: pointer;
}
.button span {
	display: flex;
	align-items: center;
	justify-content: center;
	text-align: center;
	width: 100%;
	padding: 5px 10px;
	opacity: .7;
	background: #1f783f;
	color: #fff;
	text-shadow: 0px 0px 5px #000;
}
.button span:hover {
	opacity: .9;
	color: #ff0;
}
.button :checked + span {
	opacity: 1;
}
.button .quality0 {
	background: #b2b2b2;
}
.button .quality1 {
	background: #60ff9c;
}
.button .quality2 {
	background: #5df8ff;
}
.button .quality3 {
	background: #d342ff;
}
.button .quality4 {
	background: #ffe250;
}
.button .gray {
	background: #ccc;
}
.button .red {
	background: #f00;
}
.button .green {
	background: #0f0;
}
.button .blue {
	background: #00f;
}

.icon {
	display: inline-flex;
	flex-wrap: wrap;
	gap: 5px;
}
.icon label {
	display: flex;
	cursor: pointer;
}
.icon span {
	border: 3px solid #ccc;
	border-radius: 10px;
	overflow: hidden;
}
.icon :checked + span {
	border: 3px solid #ff0;
}
`;

@grouplist.js
const ValueWeight = [1, 1.25, 2, 3, 5];
const StatusWeight = [1, 1.25, 1.5, 2, 3];

class GroupList extends HTMLElement {
	static get observedAttributes() { return ["format", "group", "list"]; }

	constructor() {
		super();
		this.root = this.attachShadow({mode: "open"});
	}
	attributeChangedCallback(name, oldValue, newValue) {
//		if(oldValue === newValue) return;
		if(name === "group") this.group = newValue;
		if(name === "format") this.format = newValue;
		this.render();
	}
	render() {
		this.root.innerHTML = "";

		const list = this.getAttribute("list");
		if(!list) {
			this.classList.add("reject");
			return;
		}

		const fragment = new DocumentFragment();

		const style = document.createElement("style");
		style.innerHTML = grouplist_css;
		fragment.appendChild(style);

		const div = document.createElement("div");
		fragment.appendChild(div);
		div.classList.add("container");

		div.appendChild(this.createHeader());
		div.appendChild(this.createTitle());
		list.split(",").forEach(v => {
			div.appendChild(this.createItem(v));
		});
		this.root.appendChild(fragment);

		const item_count = this.root.querySelectorAll(".item").length;
		this.classList.toggle("reject", item_count == 0);
	}
	createHeader() {
		const LcalGroup = myApp.LocalStringMap.get(this.group) ?? this.group;
		const html_default = `
			<div class="header">
				<span>${LcalGroup}</span>
			</div>
		`;
		const html = {
			formatStatus: `
				<div class="header">
					<span>${LcalGroup}</span>
				</div>
			`,
			formatSell: `
				<div class="header">
					<span>${LcalGroup}</span>
				</div>
			`,
			formatBuy: `
				<div class="header">
					<span>${LcalGroup}</span>
				</div>
			`,
			formatCheckItem: `
				<div class="header">
					<span>${LcalGroup}</span>
				</div>
			`,
			formatCheckType: `
				<div class="header">
					<span>${LcalGroup}</span>
				</div>
			`,
		}
		const tmplate = document.createElement("template");
		tmplate.innerHTML = this.format in html ? html[this.format] : html_default;
		return tmplate.content;
	}
	createTitle() {
		const html_default = ``;
		const html = {
			formatStatus: `
				<div class="title">
					<span class="htier"></span>
					<span class="hname">アイテム名</span>
					<span class="hstatus">ATK</span>
					<span class="hstatus">DEF</span>
					<span class="hstatus">HP</span>
					<span class="hstatus">EVA</span>
					<span class="hstatus">CRIT</span>
				</div>
			`,
			formatSell: `
				<div class="title">
					<span class="htier"></span>
					<span class="hname">アイテム名</span>
					<span class="hvalue">価格</span>
					<span class="henergy">割引エネ</span>
					<span class="hcost">コスト</span>
					<span class="hvalue">追加販売価格</span>
					<span class="henergy">追加販売エネ</span>
					<span class="hcost">コスト</span>
					<span class="hsell">推奨販売方法</span>
				</div>
			`,
			formatBuy: `
				<div class="title">
					<span class="htier"></span>
					<span class="hname">アイテム名</span>
					<span class="hvalue">追加販売価格</span>
					<span class="hvalue">追加販売コスト</span>
					<span class="hvalue">仕入しきい値</span>
				</div>
			`,
			formatCheckItem: `
				<div class="title">
					<span class="htier"></span>
					<span class="hname">アイテム名</span>
					<span class="hcheck">価格UP</span>
					<span class="hdonate">寄付</span>
				</div>
			`,
			formatCheckType: `
				<div class="title">
					<span class="hname">アイテム名</span>
					<span class="hcheck2">追加料金<br>エネルギー -10%</span>
					<span class="hcheck2">タイプ別<br>追加料金 +5%</span>
					<span class="hcheck2">全アイテム<br>追加料金 +1%</span>
				</div>
			`,
		}
		const tmplate = document.createElement("template");
		tmplate.innerHTML = this.format in html ? html[this.format] : html_default;
		return tmplate.content;
	}
	createItem(key) {
		const func = {
			formatStatus: this.createItem_formatStatus,
			formatSell: this.createItem_formatSell,
			formatBuy: this.createItem_formatBuy,
			formatCheckItem: this.createItem_formatCheckItem,
			formatCheckType: this.createItem_formatCheckType,
			formatXXX: this.createItem_formatXXX,
		}
		if(this.format in func) {
			return func[this.format](key);
		} else {
			return func["formatXXX"](key);
		}
	}
	createItem_formatStatus(key) {
		let {
			Tier, LocalName,
			ATK, DEF, HP, EVA, CRIT,
		} = myApp.ItemMap.get(key) ?? {};

		const tmplate = document.createElement("template");

		const status = selectStatus.value[0];
		if(status === "ATK" && !ATK) return tmplate.content;
		if(status === "DEF" && !DEF) return tmplate.content;
		if(status === "HP" && !HP) return tmplate.content;
		if(status === "EVA" && !EVA) return tmplate.content;
		if(status === "CRIT" && !CRIT) return tmplate.content;

		const qarity = switchQuality.value[0];
		if(ATK) ATK = Math.ceil(ATK * StatusWeight[qarity]);
		if(DEF) DEF = Math.ceil(DEF * StatusWeight[qarity]);
		if(HP) HP = Math.ceil(HP * StatusWeight[qarity]);
		EVA = EVA == 0.05 ? "5%" : EVA;
		CRIT = CRIT == 0.05 ? "5%" : CRIT;

		tmplate.innerHTML = tagLocalNumber`
			<div class="item" title="${LocalName}">
				<span class="tier">${Tier}</span>
				<span class="name">${LocalName}</span>
				<span class="status">${ATK ?? ""}</span>
				<span class="status">${DEF ?? ""}</span>
				<span class="status">${HP ?? ""}</span>
				<span class="status">${EVA ?? ""}</span>
				<span class="status">${CRIT ?? ""}</span>
			</div>
		`;
		return tmplate.content;
	}
	createItem_formatSell(key) {
		const AllValueUp = [...myApp.CheckTypeMap].filter(([k, v]) => v.AllValueUp).length;
		const sMaxEnergy = $MaxEnergy.value;
		const sDiscountThreshold = $DiscountThreshold.value;
		const sSurchageThreshold = $SurchageThreshold.value;
		const [MaxEnergy, DiscountThreshold, SurchageThreshold] = String2Number(sMaxEnergy, sDiscountThreshold, sSurchageThreshold);

		let {
			Tier, LocalName, Name, Type,
			Value, IncreaseValue, DiscountEnergy, SurchargeEnergy, SurchargeEnergyCD
		} = myApp.ItemMap.get(key) ?? {};
		const CheckItem = myApp.CheckItemMap.get(Name);
		const CheckType = myApp.CheckTypeMap.get(Type);

		const qarity = switchQuality.value[0];
		const NowValue = CheckItem?.ValueUp ? IncreaseValue : Value;
		const RoundNowValue = RoundValue(NowValue * ValueWeight[qarity]);
		let DiscountCost, SurchargeValue, NowSurchargeEnergy, SurchargeCost;
		if(Type == "Runestone" || Type == "Moonstone" || Type == "Enchantment") {
			DiscountEnergy = "---";
			DiscountCost = "---";
			SurchargeValue = "---";
			NowSurchargeEnergy = "---";
			SurchargeCost = "---";
		} else {
			DiscountCost = Math.floor(RoundNowValue / 2 / DiscountEnergy);
			SurchargeValue = RoundNowValue * 2;
			NowSurchargeEnergy = CheckType?.CostDown ? SurchargeEnergyCD : SurchargeEnergy;
			SurchargeCost = Math.floor(RoundNowValue / NowSurchargeEnergy);
		}
		const sell = ValueWeight.map(weight => {
			const RoundNowValue = RoundValue(NowValue * weight);
			const SurchageValue = RoundNowValue * (2 + 0.01 * AllValueUp);
			const DiscountCost = Math.floor(RoundNowValue / 2 / DiscountEnergy);
			const NowSurchargeEnergy = CheckType?.CostDown ? SurchargeEnergyCD : SurchargeEnergy;
			const SurchageCost = Math.floor((SurchageValue - RoundNowValue) / NowSurchargeEnergy);

			let sell = "－";
			if(DiscountCost <= DiscountThreshold) sell = "半";
			if(SurchageCost >= SurchageThreshold && NowSurchargeEnergy <= MaxEnergy) sell = "倍";
			return sell;
		});
		const cssValue = CheckItem?.ValueUp ? "value valueup" : "value";
		const cssCost = CheckType?.CostDown ? "energy costdown" : "energy";

		const tmplate = document.createElement("template");

		tmplate.innerHTML = tagLocalNumber`
			<div class="item" title="${LocalName}">
				<span class="tier">${Tier}</span>
				<span class="name" title="${LocalName}">${LocalName}</span>
				<span class="${cssValue}">${RoundNowValue}</span>
				<span class="energy">${DiscountEnergy}</span>
				<span class="cost">${DiscountCost}</span>
				<span class="value">${SurchargeValue}</span>
				<span class="${cssCost}">${NowSurchargeEnergy}</span>
				<span class="cost">${SurchargeCost}</span>
				<span class="sell quality0">${sell[0]}</span>
				<span class="sell quality1">${sell[1]}</span>
				<span class="sell quality2">${sell[2]}</span>
				<span class="sell quality3">${sell[3]}</span>
				<span class="sell quality4">${sell[4]}</span>
			</div>
		`;
		return tmplate.content;
	}
	createItem_formatBuy(key) {
		const AllValueUp = [...myApp.CheckTypeMap].filter(([k, v]) => v.AllValueUp).length;
		const sMaxEnergy = $MaxEnergy.value;
		const sDiscountThreshold = $DiscountThreshold.value;
		const sSurchageThreshold = $SurchageThreshold.value;
		const [MaxEnergy, DiscountThreshold, SurchageThreshold] = String2Number(sMaxEnergy, sDiscountThreshold, sSurchageThreshold);

		let {
			Tier, LocalName, Name, Type,
			Value, IncreaseValue, DiscountEnergy, SurchargeEnergy, SurchargeEnergyCD
		} = myApp.ItemMap.get(key) ?? {};
		const CheckItem = myApp.CheckItemMap.get(Name);
		const CheckType = myApp.CheckTypeMap.get(Type);

		const NowValue = CheckItem?.ValueUp ? IncreaseValue : Value;
		const qarity = switchQuality.value[0];
		const RoundNowValue = RoundValue(NowValue * ValueWeight[qarity]);
		const SurchageValue = Math.floor(RoundNowValue * (2 + 0.01 * AllValueUp));
		const NowSurchargeEnergy = CheckType?.CostDown ? SurchargeEnergyCD : SurchargeEnergy;
		const CostValue = NowSurchargeEnergy * DiscountThreshold;
		const BuyValue = SurchageValue - CostValue;

		const tmplate = document.createElement("template");

		tmplate.innerHTML = tagLocalNumber`
			<div class="item" title="${LocalName}">
				<span class="tier">${Tier}</span>
				<span class="name" title="${LocalName}">${LocalName}</span>
				<span class="value">${SurchageValue}</span>
				<span class="value">${CostValue}</span>
				<span class="value">${BuyValue}</span>
			</div>
		`;
		return tmplate.content;
	}
	createItem_formatCheckItem(key) {
		let {
			Tier, LocalName, Name,
		} = myApp.ItemMap.get(key) ?? {};
		let {
			ValueUp = false, Donation = [false, false, false, false, false],
		} = myApp.CheckItemMap.get(Name) ?? {};
		const checked_valueup = ValueUp ? " checked" : "";
		const checked_donation0 = Donation[0] ? " checked" : "";
		const checked_donation1 = Donation[1] ? " checked" : "";
		const checked_donation2 = Donation[2] ? " checked" : "";
		const checked_donation3 = Donation[3] ? " checked" : "";
		const checked_donation4 = Donation[4] ? " checked" : "";

		const tmplate = document.createElement("template");
		tmplate.innerHTML = tagLocalNumber`
			<div class="item" title="${LocalName}">
				<span class="tier">${Tier}</span>
				<span class="name">${LocalName}</span>
				<label class="check"><input type="checkbox" data--name="${Name}" data-key="ValueUp"${checked_valueup}></label>
				<label class="donate quality0"><input type="checkbox" data--name="${Name}" data-key="Donation" data-i="0"${checked_donation0}></label>
				<label class="donate quality1"><input type="checkbox" data--name="${Name}" data-key="Donation" data-i="1"${checked_donation1}></label>
				<label class="donate quality2"><input type="checkbox" data--name="${Name}" data-key="Donation" data-i="2"${checked_donation2}></label>
				<label class="donate quality3"><input type="checkbox" data--name="${Name}" data-key="Donation" data-i="3"${checked_donation3}></label>
				<label class="donate quality4"><input type="checkbox" data--name="${Name}" data-key="Donation" data-i="3"${checked_donation4}></label>
			</div>
		`;
		return tmplate.content;
	}
	createItem_formatCheckType(key) {
		let {
			Type = key, CostDown = false, TypeValueUp = false, AllValueUp = false,
		} = myApp.CheckTypeMap.get(key) ?? {};
		const LocalType = myApp.LocalStringMap.get(Type) ?? Type;
		const checked_costdown = CostDown ? " checked" : "";
		const checked_typevalueup = TypeValueUp ? " checked" : "";
		const checked_allvalueup = AllValueUp ? " checked" : "";

		const tmplate = document.createElement("template");
		tmplate.innerHTML = tagLocalNumber`
			<div class="item" title="${LocalType}">
				<span class="type" title="${LocalType}">${LocalType}</span>
				<label class="check2"><input type="checkbox" data--name="${Type}" data-key="CostDown"${checked_costdown}></label>
				<label class="check2"><input type="checkbox" data--name="${Type}" data-key="TypeValueUp"${checked_typevalueup}></label>
				<label class="check2"><input type="checkbox" data--name="${Type}" data-key="AllValueUp"${checked_allvalueup}></label>
			</div>
		`;
		return tmplate.content;
	}
	createItem_formatXXX(key) {
		const tmplate = document.createElement("template");
		tmplate.innerHTML = `
			<div class="item" title="${key}">
				<span class="name">${key}</span>
			</div>
		`;
		return tmplate.content;
	}
}
const grouplist_css = `
.container {
	background: #fff;
	color: #000;
}
.header {
	display: flex;
	gap: 5px;
	border-bottom: 1px solid #000;
	font-weight: bold;
	background: #ff9;
	padding: 3px 5px;
}
.title {
	display: flex;
	gap: 5px;
	font-weight: bold;
	padding: 3px 5px 0;
}
.item {
	display: flex;
	gap: 5px;
	padding: 0 5px 0;
}
.item:nth-child(2n) {
	background-color: #dfe;
}
.item:hover {
	font-weight: bold;
}

.htier {
	width: 25px;
	border-bottom: 1px dashed #000;
}
.hname {
	width: 120px;
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
	border-bottom: 1px dashed #000;
}
.hstatus {
	width: 40px;
	border-bottom: 1px dashed #000;
	text-align: center;
}
.hcheck {
	width: 50px;
	border-bottom: 1px dashed #000;
	text-align: center;
}
.hcheck2 {
	width: 100px;
	border-bottom: 1px dashed #000;
	text-align: center;
}
.hdonate {
	width: 145px;
	border-bottom: 1px dashed #000;
	text-align: center;
}
.hsell {
	width: 150px;
	border-bottom: 1px dashed #000;
	text-align: center;
}
.hvalue {
	width: 100px;
	border-bottom: 1px dashed #000;
	margin-left: 5px;
	text-align: center;
}
.henergy {
	width: 80px;
	border-bottom: 1px dashed #000;
	margin-left: 5px;
	text-align: center;
}
.hcost {
	width: 40px;
	border-bottom: 1px dashed #000;
	margin-left: 5px;
	text-align: center;
}

.tier {
	width: 25px;
	text-align: right;
}
.tier::after {
	content: ".";
}
.name {
	width: 120px;
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
}
.type {
	width: 120px;
	white-space: nowrap;
	text-overflow: ellipsis;
	overflow: hidden;
}
.status {
	width: 40px;
	text-align: right;
}
.check {
	width: 50px;
	text-align: center;
}
.check2 {
	width: 100px;
	text-align: center;
}
.donate {
	width: 25px;
	text-align: center;
}
.sell {
	width: 20px;
	text-align: center;
}
.value {
	width: 100px;
	text-align: right;
	margin-left: 5px;
}
.energy {
	width: 80px;
	text-align: right;
	margin-left: 5px;
}
.cost {
	width: 40px;
	text-align: right;
	margin-left: 5px;
}

.valueup {
	color: #00f;
}
.costdown {
	color: #00f;
}

.quality0 {
	background-color: #b2b2b2;
}
.quality1 {
	background-color: #60ff9c;
}
.quality2 {
	background-color: #5df8ff;
}
.quality3 {
	background-color: #d342ff;
}
.quality4 {
	background-color: #ffe250;
}
`;
customElements.define("group-list", GroupList);

const RoundValue = value => {
	let                  x = 50000;
	if(value <= 1000000) x =  5000;
	if(value <=  100000) x =   500;
	if(value <=   10000) x =    50;
	if(value <=    1000) x =    10;
	return Math.round(value / x) * x;
}

@showfilter.js
class ShowFilter extends HTMLDivElement {
	static get observedAttributes() { return ["select"]; }

	constructor() {
		super();
		this.root = this.attachShadow({mode: "open"});
	}
	attributeChangedCallback(name, oldValue, newValue) {
		this.selected = newValue.replaceAll(" ", "-").split(",");
		this.render();
	}
	setObserver() {
		this.observer = new MutationObserver(mutations => {
			this.observer.disconnect();
			this.render();
		});
		this.observer.observe(this, {
			childList: true
		});
	}
	render() {
console.log("render", this.selected, this.children);
		this.root.innerHTML = "";
		const style = document.createElement("style");
		style.textContent = css_ShowFilter;
		this.root.appendChild(style);
		for(const child of this.children) {
			const div = document.createElement("div");
			div.classList.add("item");
			const selected = this.selected.some(v => child.classList.contains(v));
			div.classList.toggle("selected", selected);
			div.appendChild(child.cloneNode(true));
			this.root.appendChild(div);
		}
		this.setObserver();
	}
}
const css_ShowFilter = `
:host {
	display: flex;
	gap: 1px;
}
span {
	display: flex;
	justify-content: center;
	font-size: 1em;
}
img {
	width: 100%;
	float:left;
	vertical-align: bottom;
pointer-events: none;

	filter: invert(80%) grayscale(100%);
}

.item {
	display: flex;
	justify-content: center;
	width: 100%;
	color: #000;
	background: #ccc;
	user-drag: none;
	border-radius: 10px;
	overflow: hidden;
	box-sizing: border-box;
	color: #666;
	max-width: 30px;
}

.selected {
	background: fuchsia;
}

.selected > span {
	color: #fcc;
}
.selected > img {
	filter: invert(0%) grayscale(0%) brightness(180%) saturate(200%);
}

`;
customElements.define('show-filter', ShowFilter, { extends: "div" });

@dataset.js
const ItemEntries = () => {
	return ItemList.map(data => {
		const {
			Name, Type, Tier, Value: sValue,
			ATK: sATK, DEF: sDEF, HP: sHP, EVA: sEVA, CRIT: sCRIT,
			"Unlock Prerequisite": UP,
			"Crafting Upgrade 1": CU1, "Crafting Upgrade 2": CU2, "Crafting Upgrade 3": CU3, "Crafting Upgrade 4": CU4, "Crafting Upgrade 5": CU5,
			"Discount Energy": sDiscountEnergy, "Surcharge Energy": sSurchargeEnergy
		} = data;

		const [Value, ATK, DEF, HP, EVA, CRIT, DiscountEnergy, SurchargeEnergy] = String2Number(sValue, sATK, sDEF, sHP, sEVA, sCRIT, sDiscountEnergy, sSurchargeEnergy);

		const ValueIncrease = [CU1, CU2, CU3, CU4, CU5].includes("x1.5 Value Increase") ?
			1.5 : [CU1, CU2, CU3, CU4, CU5].includes("x1.25 Value Increase") ?
			1.25 : 1;
		const IncreaseValue = Value * ValueIncrease;
		const SurchargeEnergyCD = Math.floor(SurchargeEnergy * 0.9);
		const GoldenChest = UP == "Golden Chest";

		const result = {
			Name, Type, Tier, Value, IncreaseValue,
			DiscountEnergy, SurchargeEnergy, SurchargeEnergyCD,
			ATK, DEF, HP, EVA, CRIT,
			GoldenChest
		};

		if(isNaN(ATK))  delete result.ATK;
		if(isNaN(DEF))  delete result.DEF;
		if(isNaN(HP))   delete result.HP;
		if(isNaN(EVA))  delete result.EVA;
		if(isNaN(CRIT)) delete result.CRIT;

		if(Type == "Runestone" || Type == "Moonstone" || Type == "Enchantment") {
			result.IncreaseValue = result.Value;
			delete result.DiscountEnergy;
			delete result.SurchargeEnergy;
			delete result.SurchargeEnergyCD;
			delete result.ATK;
			delete result.DEF;
			delete result.HP;
			delete result.EVA;
			delete result.CRIT;
		}

		return [Name, result];
	});
}
const getEntries = data => data.split("\n").filter(Boolean).map(d => d.split("\t"));
const String2Number = (...args) => args.map(s => Number(s.replaceAll(",", "")));

const equalConditions = ["boolean", "number", "string"];
const filterProp = (key, target) => v => equalConditions.includes(typeof target) ? v[key] === target : target.includes(v[key]);
const getProp = key => v => v[key];

const EnchantedE = `
Canopy Cap
Trailblazers
Ice Pick
Scroll of Cleansing
Tailwind
Darkwood Branch
Arboreal Blade
Swift Mitts
Emerald Ring
Aurum Ward
Molten Voulge
Eclipse Amulet
Tome of the Night
Brinewater Helm
Amber Staff
Ceremonial Breastplate
Cindersole
Hat of the Four Winds
Triton Lance
Vestal Raiments
Sungrasp Gauntlets
Glade Guard Armor
Quetzalcoatl
Black Wyrm Claws
Meteor Hammer
Stonesplitter
Nomad Veil	
Brinewater Do
Bottled Mirth
Soulstone Ring
Damocles
Levia Fang
Mistpeak Bloom
Alpine Stride
Crusader Helmet
Phoenix Staff
Prometheon
Tidebringer
Gaia Enforcer
Storm Dragon Mask
Purgatory
Plaguewalkers
Amber Citadel
Northwind Gem
Caladbolg
Terra Tyrannis
Longinus
Nightmare Fellblade
Phoenix Litany
Monsoon Heart
Bleakspire Roots
Last Breath
Sunglow Impact
Abyssal Hood
`;
const EnchantedS = `
Mundra's Masher
Mundra's Hornbow
Mundra's Scepter
Mundra's Tabard
Mundra's Amulet
`;

@item.js
const ItemList =
[
];

@localstring.js
const LocalString = ``;

@script.js
const myApp = {};
document.addEventListener("DOMContentLoaded", async () => {
	myApp.para = new IndexedDBkv({store: "para"});
	$MaxEnergy.value = await myApp.para.get("MaxEnergy") ?? "3,000";
	$DiscountThreshold.value = await myApp.para.get("DiscountThreshold") ?? "500";
	$SurchageThreshold.value = await myApp.para.get("SurchageThreshold") ?? "800";

	myApp.ItemMap = new Map(ItemEntries());
	myApp.LocalStringMap = new Map(getEntries(LocalString));
	myApp.CheckItemDB = new IndexedDB({store: "CheckItem", key: "Name"});
	myApp.CheckTypeDB = new IndexedDB({store: "CheckType", key: "Type"});
	myApp.CheckItemMap = new Map(await myApp.CheckItemDB.entries());
	myApp.CheckTypeMap = new Map(await myApp.CheckTypeDB.entries());
	const EnchantedEMap = new Map(getEntries(EnchantedE));
	const EnchantedSMap = new Map(getEntries(EnchantedS));
	myApp.ItemMap.forEach((v, k) => {
		v.EnchantedE = EnchantedEMap.has(k);
		v.EnchantedS = EnchantedSMap.has(k);
		v.LocalName = myApp.LocalStringMap.get(k) ?? k;
	});

	const fragment3 = new DocumentFragment();
	const group3 = {
		GroupA: ["Sword", "Axe", "Dagger", "Mace", "Spear", "Bow", "Wand", "Staff", "Gun", "Crossbow"],
		GroupB: ["Heavy Armor", "Light Armor", "Clothes","Helmet", "Rogue Hat", "Magician Hat", "Gauntlets", "Gloves"],
		GroupC: ["Heavy Footwear","Light Footwear", "Herbal Medicine", "Potion", "Spell", "Shield", "Ring", "Amulet"],
		GroupD: ["Stone"],
		GroupE: ["Element","Spirit"],
	};
	Object.entries(group3).forEach(([k, v]) => {
		const grouplist = document.createElement("group-list");
		grouplist.setAttribute("format", "formatCheckType");
		grouplist.setAttribute("group", k);
		grouplist.setAttribute("list", v);
		fragment3.appendChild(grouplist);
	});
	$viewCheckType.appendChild(fragment3);

	document.querySelectorAll(".changeList").forEach(e => {
		e.addEventListener("changed", () => {
			const _filterTier = filterTier.value;
			const _filterType = filterCategory.value
				.filter(v => filterRack.value.includes(v))
				.filter(v => filterJob.value.includes(v));
			showFilterTier.setAttribute("select", _filterTier);
			showFilterType.setAttribute("select", _filterType);

			document.querySelectorAll(".targetList").forEach(e => {
				const key = e.getAttribute("key");
				const group = e.getAttribute("group");
				const list = [...myApp.ItemMap.values()]
					.filter(filterProp(key, group))
					.filter(filterProp("Tier", _filterTier))
					.filter(filterProp("Type", _filterType))
					.map(getProp("Name"));
				e.setAttribute("list", list);
			});
		});
	});

	const event = new CustomEvent("changed", {
		bubbles: true,
		composed: true,
	});
	filterCategory.dispatchEvent(event);

	document.querySelector(".loading").classList.add("reject");
	document.querySelector("main").classList.remove("reject");
});

const tagLocalNumber = (sList, ...vList) => {
	const LocalValue = v => {
		return v.toLocaleString();
	}
	return vList
		.map((v, i) => sList[i] + LocalValue(v))
		.concat(sList.slice(vList.length))
		.join("")
	;
}
